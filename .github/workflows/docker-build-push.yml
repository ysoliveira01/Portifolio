# Nome da sua pipeline/workflow
name: Docker Build and Push to Docker Hub

# Define quando o workflow será executado
on:
  push:
    branches:
      - main

# Define as variáveis de ambiente que serão usadas globalmente no workflow
env:
  DOCKER_HUB_REPO: ysoliveira/portifolio

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # PASSO 1: Configurar o Docker Buildx
      # Criar um builder novo e nomeado que suporte o cache GHA
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Define o nome do builder que será criado
          # Você pode escolher qualquer nome, 'mybuilder' é um exemplo
          buildkitd-flags: --debug
          driver: docker
          driver-opts: |
            image=moby/buildkit:latest
          # Use 'append: true' para adicionar a um builder existente ou 'false' para um novo
          # builder: mybuilder # Nome do builder. Se omitido, usará o default.

      - name: Extract Docker metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_REPO }}
          tags: |
            latest
            v${{ github.run_number }}

      # PASSO 2: Build e Push da imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: meu-portfolio/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Agora, o cache do GHA deve funcionar corretamente
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
