# Nome da sua pipeline/workflow
name: Docker Build and Push to Docker Hub

# Define quando o workflow será executado
on:
  push:
    # O workflow será disparado a cada push para a branch 'main'
    branches:
      - main

# Define as variáveis de ambiente que serão usadas globalmente no workflow
env:
  # Nome do repositório no Docker Hub (seu_usuario/nome_do_repositorio)
  DOCKER_HUB_REPO: ysoliveira/portifolio

jobs:
  # Define um job chamado 'build-and-push-docker-image'
  build-and-push-docker-image:
    # O job será executado em um ambiente Ubuntu
    runs-on: ubuntu-latest

    # Passos a serem executados neste job
    steps:
      # 1. Checkout do código do repositório
      # Isso clona seu repositório GitHub para que o runner do Action possa acessá-lo.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login no Docker Hub
      # Usa a action 'docker/login-action' para fazer login no Docker Hub usando os segredos.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Extrair metadados para tags Docker
      # Esta action é muito útil para gerar tags baseadas no commit SHA, branch, data, etc.
      # Usaremos para gerar uma tag 'vX.Y' (baseada na quantidade de commits) e 'latest'.
      - name: Extract Docker metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_REPO }}
          # Define as tags que serão geradas.
          # 'latest' sempre apontará para a última build da branch.
          # 'v${{ github.run_number }}' criará tags como 'v1', 'v2', 'v3' etc.
          # (github.run_number é o número da execução da pipeline)
          tags: |
            latest
            v${{ github.run_number }}

      # 4. Build e Push da imagem Docker
      # Usa a action 'docker/build-push-action' para construir e fazer o push da imagem.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # O contexto do build é a raiz do repositório, onde o Dockerfile está.
          context: meu-portfolio/
          # Habilita o push da imagem para o registro (Docker Hub neste caso).
          push: true
          # Define as tags da imagem, usando as tags geradas pela action 'metadata-action'.
          tags: ${{ steps.meta.outputs.tags }}
          # Define os labels para a imagem, usando os labels gerados pela action 'metadata-action'.
          labels: ${{ steps.meta.outputs.labels }}
          # Removendo as linhas de cache que causaram o problema.
